class UaS_StealthHandler : Inventory {
	int threshold;
	int stealth;
	int trueLightLevel;
	DynamicLight currentLight;

	default {
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.UNTOSSABLE;
	}

	override void DoEffect() {
		if (!owner || !owner.player) { return; }
		if (!UaS_AI_Stealth) { return; }

		threshold = int((56.0 / owner.player.crouchfactor) - (owner.vel.length() * 5));

		stealth -= clamp((GetLightLevel() - threshold), -3, 3);
		stealth = clamp(stealth, 0, 100);
		if(owner.frame == 5) { stealth = 0; }

		if (stealth == 100) {
			owner.bSHADOW = true;
		}
		if (stealth == 0) {
			owner.bSHADOW = false;
		}
		Shader.SetUniform1f(owner.player, "stealthvision", "stealth", double(stealth * 0.01));
		Shader.SetEnabled(owner.player, "stealthvision", true);
	}

	int GetLightLevel() {
		// Set up light iterator
		ThinkerIterator LightFinder = ThinkerIterator.Create("DynamicLight", Thinker.STAT_DLIGHT);

		// Initial "base" lightlevel
		int trueLightLevel = owner.cursector.lightlevel;

		// Iterate lights
		while (currentLight = DynamicLight(LightFinder.Next())) {
			bool IROnlyLight = (
				currentLight.args[DynamicLight.LIGHT_RED] == 64 &&
				currentLight.args[DynamicLight.LIGHT_GREEN] == 63 &&
				currentLight.args[DynamicLight.LIGHT_BLUE] == 62);
			if (IROnlyLight) { continue; } // Skip UaS IR illuminator
			if (currentLight is "VisorLight") { continue; } // Skip HD's nightvision visor light
			if (!currentLight.CheckSight(owner)) { continue; } //Skip if the light isn't in LoS

			vector3 posdiff = levellocals.Vec3Diff((owner.pos.x, owner.pos.y, owner.pos.z + (owner.height / 2)), currentlight.pos);
			double currentDistance = posdiff.length(); //owner.Distance3D(currentLight);

			double lightIntensity = max(currentLight.args[DynamicLight.LIGHT_INTENSITY], 1);
			double distanceFactor = currentDistance / (lightIntensity * 2);

			double avgIntensity = (currentLight.args[DynamicLight.LIGHT_RED] +
				currentLight.args[DynamicLight.LIGHT_GREEN] +
				currentLight.args[DynamicLight.LIGHT_BLUE]) / 3;

			// Invert cuz math
			avgIntensity *= 1.0 - distanceFactor;

			// Handle spotlights
			if (currentlight.bSPOT) {
				double offangle = abs(deltaangle(currentlight.AngleTo(owner), currentlight.angle));
				if (offangle > currentlight.SpotInnerAngle) { avgIntensity *= 0.5; }
				if (offangle > currentlight.SpotOuterAngle) { avgIntensity *= 0.1; }
			}

			// Intensify lights close to player
			if (currentDistance < owner.radius * 3) { avgIntensity *= 100; }

			// Special handling for Steve's Flashlight
			// This is a disgusting hack, BTW
			string steves = "ActorHeadLight";
			if (currentLight.GetClass() == steves && posdiff.xy.length() < owner.radius) { avgIntensity *= 100; }

			// Handle dormant lights
			if (currentLight.bDORMANT) { avgIntensity = 0; }

			trueLightLevel = int(max(trueLightLevel, avgIntensity));
		}
		if (UaS_Debug & Stealth) { owner.A_Log("Stealth "..stealth.." - LightLevel "..trueLightLevel.." - threshold "..threshold); }
		return trueLightLevel;
	}
}
